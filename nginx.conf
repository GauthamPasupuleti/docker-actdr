error_log stderr notice;
daemon off;

events{}

http {
lua_code_cache on;
init_by_lua_file 'serve.lua';
server {
listen 8910;
lua_code_cache on;
client_body_buffer_size 10M;
client_max_body_size 10M;
location /predict {
# only permit POST requests
if ( $request_method !~ ^(POST)$ ) {
return 403;
}

content_by_lua '
		local upload = require "resty.upload"
		local cjson = require "cjson"
                local chunk_size = 4096 -- should be set to 4096 or 8192
                                     -- for real-world settings

                local form, err = upload:new(chunk_size)
                if not form then
                    ngx.log(ngx.ERR, "failed to new upload: ", err)
                    ngx.exit(500)
                end

                form:set_timeout(1000) -- 1 sec

		local last_header = false
		local accum = torch.ByteStorage()
                while true do
                    local typ, res, err = form:read()
                    if not typ then
                        ngx.say("failed to read: ", err)
                        return
                    end
		    if typ=="header" then
			last_header = true
			accum = torch.ByteStorage()
		    end

		    if last_header and typ=="body" then
			if res then
			  local byteres = torch.ByteStorage():string(res)
			  local prev_size = accum:size()
			  local res_size = byteres:size()
			  -- should allocate once... (future)
			  accum:resize(prev_size+res_size)
			  for i=1,res_size do
			    accum[prev_size+i] = byteres[i]
			  end
			end
		    end

		    if last_header and typ=="part_end" then
			last_header = false

                	local load_ok,img = pcall(loadImg,accum)
			--local img = loadImg(accum)
                	accum = torch.ByteStorage()

                	local pred_ok,resp = pcall(FeedForward,img)
			--local resp = FeedForward(img)
                	img = nil

                	if not (load_ok and pred_ok) then
                  		resp = {}
                  		resp["success"] = false
				print("Image load or model process fail")
                	end
                  	ngx.say(cjson.encode(resp))
		    end

                    if typ == "eof" then
                        break
                    end
                end

                local typ, res, err = form:read()
';
}
}
}
