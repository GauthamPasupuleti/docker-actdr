error_log stderr notice;
daemon off;

events{}

http {
  lua_code_cache on;
  init_by_lua_file 'serve.lua';
  server {
  listen 8080;
  lua_code_cache on;
  client_body_buffer_size 30M;
  client_max_body_size 30M;
  location /grade {
  # only permit POST requests
  if ( $request_method !~ ^(POST)$ ) {
  return 403;
}

content_by_lua '
  local upload = require "resty.upload"
  local cjson = require "cjson"
  local chunk_size = 4096 -- should be set to 4096 or 8192

	-- check if application/octet-stream or multipart form-data
	if ngx.var.content_type == "application/octet-stream" then
		-- we may add support in future?
		ngx.log(ngx.ERR, "failed upload: ", "direct application/octet-stream not supported yet")
		ngx.exit(500)
	end
  local form, err = upload:new(chunk_size)
  if not form then
    ngx.log(ngx.ERR, "failed to new upload: ", err)
    ngx.exit(500)
  end

  form:set_timeout(1000) -- 1 sec

  local last_header = false
	local multipart = false
  local accum = torch.ByteStorage()

	local computeResponse = function()
		local load_ok,img,err = pcall(loadImg,accum)
		if not img then
			ngx.log(ngx.ERR, "failed to load image: ", err)
		end
		accum = torch.ByteStorage()

		local pred_ok,resp,err = pcall(FeedForward,img)
		img = nil

		if not (load_ok and pred_ok) then
				resp = {}
				resp["message"] = "Image load or model process fail"
				ngx.log(ngx.ERR, "Image load or model process fail")
		end
		ngx.say(cjson.encode(resp))
	end

  while true do
    local typ, res, err = form:read()
    if not typ then
      local resp= {}
      resp["message"] = "failed to read: "..err
      ngx.say(cjson.encode(resp))
      return
    end
	  if typ=="header" then
	    last_header = true
	    accum = torch.ByteStorage()
	  end

	  if last_header and typ=="body" then
		  if res then
		    local byteres = torch.ByteStorage():string(res)
		    local prev_size = accum:size()
		    local res_size = byteres:size()
		    -- should allocate once... (future)
		    accum:resize(prev_size+res_size)
		    for i=1,res_size do
		      accum[prev_size+i] = byteres[i]
		  	end
	  	end
	  end

	  if last_header and typ=="part_end" then
	  	last_header = false
			multipart = true
	    computeResponse()
  	end

    if typ == "eof" then
        break
    end
	end

	if not multipart then
		computeResponse()
	end
  local typ, res, err = form:read()
';
}
}
}
